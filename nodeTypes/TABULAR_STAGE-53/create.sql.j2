{#
    Copyright (c) 2023 Coalesce. All rights reserved.
This script and its associated documentation are confidential and proprietary to Coalesce.
Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
does not permit copying or modification for any other purpose.  
#}
{# == Node Type Version        : 1  == #}
{# == Node Type Name           : Work Advanced Deploy == #}
{# == Node Type Description    : This node creates work table,view and also override create sql for view with advanced deployment strategy == #}



{% if desiredState == currentState %}

{{ stage('Nothing to do.') }}
select 1 = 0

{% elif desiredState %}

    {% if  desiredState.node.override.create.enabled and desiredState.node.materializationType == 'view' %}

         {% if currentState != undefined %}
            {% if currentState.node.materializationType != 'view' %}
                {{ stage('Drop ' + currentState.node.materializationType + ' ' + ref_no_link(currentState.node.location.name, currentState.node.name), true, "sql", "drop") }}
                DROP TABLE IF EXISTS {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}
            {% endif %}
        {% endif %}

	      {{ desiredState.node.override.create.script }}

    {%elif desiredState.node.materializationType == 'view' %}

        {% if currentState != undefined %}
            {% if currentState.node.materializationType != 'view' %}
                {{ stage('Drop ' + currentState.node.materializationType + ' ' + ref_no_link(currentState.node.location.name, currentState.node.name), true, "sql", "drop") }}
                DROP TABLE IF EXISTS {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}
            {% endif %}
        {% endif %}

        {{ stage('Create Work View', true, "sql", "create") }}

        CREATE OR REPLACE VIEW {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
        (
            {% for col in desiredState.columns %}
                "{{ col.name }}"
                {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                {%- if not loop.last -%}, {% endif %}
            {% endfor %}
        )
        {%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description | escape }}'{% endif %}
        AS
        {% for source in desiredState.sources %}
            SELECT
            {% if desiredState.config.selectDistinct %}
              DISTINCT
            {% endif %}
            {% for col in source.columns %}
                {{ get_source_transform(col) }} AS "{{ col.name }}"
                {%- if not loop.last -%}, {% endif %}
            {% endfor %}

            {{ source.join }}
            {% if desiredState.config.groupByAll %}
		       Group By All
	         {% endif %}
            {% if not loop.last %}
                {% if desiredState.config.insertStrategy in ['UNION', 'UNION ALL'] %}
                    {{ desiredState.config.insertStrategy }}
                {% else %}
                    UNION
                {% endif %}
            {% endif %}
        {% endfor %}

    {% elif desiredState.node.materializationType == 'table' or desiredState.node.materializationType == 'transient table'  %}
        
        {# Figure out cluster key #}
        {% set nsVariables = namespace(finalClusterKey="") %}
        {% if desiredState.config.clusterKey == true %}
            {% if desiredState.config.clusterKeyExpressions == true %}
                {% set column, expression = desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='columnNameExpressions.name') | list, desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='sqlExpression') | list %}

                {%- set nsVariables = namespace(clusterValues=[]) %}

                {% for r in column %}
                    {% if expression[loop.index0] == "" %}
                        {% set nsVariables.clusterValues = nsVariables.clusterValues +  ['"'+r+'"'] %}
                    {% else %}
                        {% set nsVariables.clusterValues = nsVariables.clusterValues + [expression[loop.index0]] %}
                    {% endif %}
                {% endfor %}

                {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

            {% else %}

                {% set column = desiredState.config.clusterKeyConfig.get('items') | map(attribute='columnName.name') | list %}

                {%- set nsVariables = namespace(clusterValues=[]) %}

                {% for r in column %}
                    {% set nsVariables.clusterValues = nsVariables.clusterValues + ['"'+r+'"'] %}
                {% endfor %}

                {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

            {% endif %}
        {% endif %}


        {% if currentState != undefined and currentState.node.materializationType != desiredState.node.materializationType %}

                {# Change in materialization type #}

                {{ stage('Drop ' + currentState.node.materializationType + ' ' + ref_no_link(currentState.node.location.name, currentState.node.name), true, "sql", "drop") }}

                 {% if currentState.node.materializationType == 'view' %} 
                      DROP {{currentState.node.materializationType}} IF EXISTS {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}
                {% else %}
                      DROP TABLE IF EXISTS {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}
                {% endif %}
                 
                {{ stage('Create Work '+ ' {{desiredState.node.materializationType}}' , true, "sql", "create") }}
               CREATE OR REPLACE {{desiredState.node.materializationType}} {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                (
                {% for col in desiredState.columns %}
                    "{{ col.name }}" {{ col.dataType }}
                    {%- if not col.nullable %} NOT NULL
                        {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                    {% endif %}
                    {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
                )
               {%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description | escape }}'{% endif %}

               {% if desiredState.config.clusterKey == true %}
                  {{ stage('Apply Table Clustering', true, "sql", "create") }}
                 ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }} {{ nsVariables.finalClusterKey }}

                   {{ stage('Resume Recluster Table', true, "sql", "create") }}
                  ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }} RESUME RECLUSTER

               {% endif %}
                
        {% endif %}

        {% if currentState == undefined or currentState.storageLocations | length == 0  %}
            {{ stage('Create Work '+ ' {{desiredState.node.materializationType}}' , true, "sql", "create") }}
            CREATE OR REPLACE {{desiredState.node.materializationType}} {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
            (
                {% for col in desiredState.columns %}
                    "{{ col.name }}" {{ col.dataType }}
                    {%- if not col.nullable %} NOT NULL
                        {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                    {% endif %}
                    {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
            )
            {%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description | escape }}'{% endif %}

        {% if desiredState.config.clusterKey == true %}
            {{ stage('Apply Table Clustering', true, "sql", "create") }}
            ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }} {{ nsVariables.finalClusterKey }}

            {{ stage('Resume Recluster Table', true, "sql", "create") }}
            ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }} RESUME RECLUSTER
        {% endif %}

        {% elif currentState != undefined and currentState.node.materializationType == desiredState.node.materializationType %}

            {# Change Node Name or Change Storage Location #}
            {# Storage Location Tests #}
            {# Only need to account for updated Storage Location mappings   #}
            {# Current Namespace Varialbes #}
            {% set nsVariables = namespace(nsCurrentDepStorageLocations="") %}
            {% set nsVariables = namespace(nsCurrentSourceStorageLocations="") %}
            {% set nsVariables = namespace(nsCurrentTargetStorageLocations="") %}
            {% set nsVariables = namespace(nsCurrentUsedStorageLocations="") %}

            {# Current State Storage Location Info #}
            {% for source in currentState.sources %}
                {% for dep in source.dependencies %}
                    {% set depSourceLocation = dep.node.location.name %}
                    {% if loop.first %}
                        {% set nsVariables.nsCurrentDepStorageLocations = depSourceLocation %}
                    {% else %}
                        {% set nsVariables.nsCurrentDepStorageLocations = nsVariables.nsCurrentDepStorageLocations + ',' + depSourceLocation %}
                    {% endif %}
                {% endfor %}
                
                {% if loop.first %}
                    {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentDepStorageLocations %}
                {% else %}
                    {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentDepStorageLocations %}
                {% endif %}
            {% endfor %}

            {% set nsVariables.nsCurrentTargetStorageLocations = currentState.node.location.name  %}

            {% set nsVariables.nsCurrentUsedStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentTargetStorageLocations %}

            {% set currentStorageLocations = (nsVariables.nsCurrentUsedStorageLocations).split(',') | list %}
            {% set currentUniqueStorageLocations = currentStorageLocations | unique | sort | list %}

            {# Desired Namespace Variables #}
            {% set nsVariables = namespace(nsDesiredDepStorageLocations="") %}
            {% set nsVariables = namespace(nsDesiredSourceStorageLocations="") %}
            {% set nsVariables = namespace(nsDesiredTargetStorageLocations="") %}
            {% set nsVariables = namespace(nsDesiredUsedStorageLocations="") %}

            {% set nsVariables = namespace(storageLocationTest="") %}

            {# Desired State Storage Location Info #}
            {% for source in desiredState.sources %}
                {% for dep in source.dependencies %}
                    {% set depSourceLocation = dep.node.location.name %}
                    {% if loop.first %}
                        {% set nsVariables.nsDesiredDepStorageLocations = depSourceLocation %}
                    {% else %}
                        {% set nsVariables.nnsDesiredDepStorageLocations = nsVariables.nsDesiredDepStorageLocations + ',' + depSourceLocation %}
                    {% endif %}
                {% endfor %}
                
                {% if loop.first %}
                    {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredDepStorageLocations %}
                {% else %}
                    {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredDepStorageLocations %}
                {% endif %}
            {% endfor %}

            {% set nsVariables.nsDesiredTargetStorageLocations = desiredState.node.location.name  %}

            {% set nsVariables.nsDesiredUsedStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredTargetStorageLocations %}

            {% set desiredStorageLocations = (nsVariables.nsDesiredUsedStorageLocations).split(',') | list %}
            {% set desiredUniqueStorageLocations = desiredStorageLocations | unique | sort | list %}

            {# Test  #}
            {% set nsVariables.storageLocationTest = true %}
            {% set nodeCommentTest = currentState.node.description == desiredState.node.description %}

            {% for name in desiredUniqueStorageLocations if nsVariables.storageLocationTest == true %}
                {# Current mappings #}
                {% set currentDatabase = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                {% set currentSchema = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                {% set currentDatabaseSchema = currentDatabase + '.' + currentSchema %}
                
                {# Desired mappings #}
                {% set desiredDatabase = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                {% set desiredSchema = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                {% set desiredDatabaseSchema = desiredDatabase + '.' + desiredSchema %}

                {% if currentDatabaseSchema != desiredDatabaseSchema %}
                    {% set nsVariables.storageLocationTest = false %}
                {% endif %}
            {% endfor %}

            {# Clustering Test #}
            {% set clusterKeyTest = currentState.config.clusterKey == desiredState.config.clusterKey %}
            {% set clusterKeyExpressionsTest = currentState.config.clusterKeyExpressions == desiredState.config.clusterKeyExpressions %}
            {% set clusterKeyConfigTest = currentState.config.clusterKeyConfig == desiredState.config.clusterKeyConfig %}
            {% set clusterKeyConfigExpressionsTest = currentState.config.clusterKeyConfigExpressions == desiredState.config.clusterKeyConfigExpressions %}

            {% if 
                clusterKeyTest == false or
                clusterKeyExpressionsTest == false or
                clusterKeyConfigTest == false or
                clusterKeyConfigExpressionsTest == false %}

                {% set clusterTest = false %}
            {% else %}
                {% set clusterTest = true %}
            {% endif %}

            {# Rename / Move Object #}
            {% if (nsVariables.storageLocationTest == false or currentState.node.name != desiredState.node.name) %}
                {{ stage('Rename and / or Move Table', true, "sql", "alter") }}
                ALTER TABLE {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}
                RENAME TO   {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
            {% endif %}

            {# Change table description #}
            {% if (nsVariables.nodeCommentTest == false or currentState.node.description != desiredState.node.description) %}
                 {{ stage('Change table description', true, "sql", "alter") }}
                 ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                SET COMMENT = '{{ desiredState.node.description | escape }}'
            {% endif %}



            {# Drop Columns #}
            {% set nsVariables = namespace(colchanges=0) %}
            {% for dropCurCol in currentState.columns %}
                {% if dropCurCol.id not in desiredState.columns | map(attribute="id") %}
                {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                    {% if nsVariables.colchanges == 1 %}
                        {{ stage('Drop Columns', true, "sql", "alter") }}
                        ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                        DROP COLUMN 
                    {% else %}
                        , 
                    {% endif %}
                    "{{ dropCurCol.name }}"
                {% endif %}
            {% endfor %}

            {# Add Columns #}
            {% set nsVariables = namespace(colchanges=0) %}
            {% for addDesCol in desiredState.columns %}
                {% if addDesCol.id not in currentState.columns | map(attribute="id") %}
                {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                    {% if nsVariables.colchanges == 1 %}
                        {{ stage('Add Columns', true, "sql", "alter") }}
                        ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                        ADD COLUMN
                    {% else %}
                        ,
                    {% endif %}
                        "{{ addDesCol.name }}" {{ addDesCol.dataType }}
                        {%- if not addDesCol.nullable %} NOT NULL
                            {%- if addDesCol.defaultValue | length > 0 %} DEFAULT {{ addDesCol.defaultValue }}{% endif %}
                        {% endif %}
                        {%- if addDesCol.description | length > 0 %} COMMENT '{{ addDescol.description | escape }}'{% endif %}
                {% endif %}
            {% endfor %}

            {# Rename Columns #}
            {% for renameCurCol in currentState.columns %}
                {% if renameCurCol.id in desiredState.columns | map(attribute="id") %}
                    {% set desiredColumnName = desiredState.columns | selectattr('id', 'equalto', renameCurCol.id) | map(attribute='name') | first %}
                    {% if renameCurCol.name != desiredColumnName %}
                        {{ stage('Rename Column ' + renameCurCol.name, true, "sql", "alter") }}
                        ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                        RENAME COLUMN "{{ renameCurCol.name }}"
                        TO "{{ desiredColumnName }}"
                    {% endif %}
                {% endif %}
            {% endfor %}

            {# Change data types etc #}
            {% set nsVariables.colchanges = 0 %}
            {% for alterCurCol in currentState.columns %}        
                {% if alterCurCol.id in desiredState.columns | map(attribute="id") %}
                    {% set currentDatatype = alterCurCol.dataType %}
                    {% set currentNullable = alterCurCol.nullable %}
                    {% set currentDefaultValue = alterCurCol.defaultValue %}
                    {% set currentDescription = alterCurCol.description %}

                    {% set desiredColumnName = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='name') | first %}
                    {% set desiredDatatype = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='dataType') | first %}
                    {% set desiredNullable = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='nullable') | first %}
                    {% set desiredDefaultValue = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='defaultValue') | first %}
                    {% set desiredDescription = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='description') | first %}

                    {% set datatypeTest = currentDatatype == desiredDatatype %}
                    {% set nullableTest = currentNullable == desiredNullable %}
                    {% set defaultValueTest = currentDefaultValue == desiredDefaultValue %}
                    {% set descriptionTest = currentDescription == desiredDescription %}

                    {% if (datatypeTest == false or 
                            nullableTest == false  or
                            defaultValueTest == false or
                            descriptionTest == false) %}
                        {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                        {% if nsVariables.colchanges == 1 %}
                            {{ stage('Change Column Attributes', true, "sql", "alter") }}
                            ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                            MODIFY
                        {% endif %}
                        {% if datatypeTest == false %}
                            {% if nsVariables.colchanges > 1 %},{% endif %}
                            COLUMN "{{ desiredColumnName }}"
                            SET DATA TYPE {{ desiredDatatype }}
                            {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                        {% endif %}
                        {% if nullableTest == false %}
                            {% if nsVariables.colchanges > 1 %},{% endif %}
                            COLUMN "{{ desiredColumnName }}"
                            {% if currentNullable == true %}
                                SET
                            {% else %}
                                DROP
                            {% endif %}
                            NOT NULL
                            {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                        {% endif %}
                        {% if descriptionTest == false %}
                            {% if nsVariables.colchanges > 1 %},{% endif %}
                            COLUMN "{{ desiredColumnName }}"
                            COMMENT '{{ desiredDescription }}'
                            {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                        {% endif %}
                        {% if defaultValueTest == false %}
                            {% if nsVariables.colchanges > 1 %},{% endif %}
                            COLUMN "{{ desiredColumnName }}"
                            {% if desiredDefaultValue == '' %}
                                DROP DEFAULT
                            {% else %}
                                SET DEFAULT {{ desiredDefaultValue }}
                            {% endif %}
                            {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                        {% endif %}
                        
                    {% else %}
                                            
                    {% endif %}
                {% endif %}
            {% endfor %}
            
            {# Figure out cluster key #}
            {% set nsVariables = namespace(finalClusterKey="",clusterValues=[]) %}
            {% if clusterTest == false %}
                {% if desiredState.config.clusterKeyExpressions == true %}
                    {% set column, expression = desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='columnNameExpressions.name') | list, desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='sqlExpression') | list %}
 
                    {% for r in column %}
                        {% if expression[loop.index0] == "" or expression[loop.index0] is undefined%}
                            {% set nsVariables.clusterValues = nsVariables.clusterValues + ['"'+r+'"']%}
                        {% else %}
                            {% set nsVariables.clusterValues = nsVariables.clusterValues +[expression[loop.index0]] %}
                        {% endif %}
                    {% endfor %}
 
                    {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}
 
                {% elif desiredState.config.clusterKey == true %}
 
                    {% set column = desiredState.config.clusterKeyConfig.get('items') | map(attribute='columnName.name') | list %}
 
                    {% for r in column %}
                        {% set nsVariables.clusterValues = nsVariables.clusterValues + ['"'+r+'"']%}
                    {% endfor %}
 
                    {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}
                {% else %}
 
                    {% set nsVariables.finalClusterKey = 'DROP CLUSTERING KEY' %}
 
                {% endif %}
 
                {{ stage('Recluster TABLE', true, "sql", "alter") }}
                ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                {{ nsVariables.finalClusterKey }}
 
            {% endif %}

        {% endif %}


    {% endif %}

{% elif currentState != undefined and desiredState == undefined %}

    {# Table or View Name #}
    {% set targetObjectDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
    {% set targetObjectSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
    {% set fullyQualifiedTargetObjectName = ref_no_link(currentState.node.location.name, currentState.node.name) %}
    
    {% if currentState.node.materializationType == 'view' %}

     {{ stage('Drop Table or View', true, "sql", "drop") }}
     DROP {{ currentState.node.materializationType }} IF EXISTS {{ fullyQualifiedTargetObjectName }}

    {% else %}
     
       {{ stage('Drop ' + currentState.node.materializationType , true, "sql", "drop") }}
       DROP TABLE IF EXISTS {{ fullyQualifiedTargetObjectName }}

    {% endif %}

{%- else -%}

{{ stage('Nothing to do.') }}
select 1 = 0

{% endif %}
